#labels filtering,Featured
= Why filtering a grep result?  =

From Grep4j 1.6.1 you can filter the result/s of your greps.

This feature can be useful if you want to extract different kind of information from the same grep result/s without paying the cost of another remote connection.


== Example ==

Let say you have a remote log that you want to grep, in order to know how many "update operations" were sent to a server.

You also want to know how many updates for each customer-id arrived in the server.

You also want to see for each user, what kind of updates were sent.

Finally you are also interested in how many updates were sent at 10am.

The log looks like this:

{{{
...
2012-05-30 08:48:52 INFO [org.consumer.AnMDB] (main) User Marco customer-id:12345  operation=update received
2012-05-30 08:48:53 INFO [org.consumer.UserDAO] (main) User Marco customer-id:12345 stored successfully
...
2012-05-30 10:10:11 INFO [org.consumer.AnMDB] (main) User Andrea customer-id:12346  operation=update received
2012-05-30 10:10:12 INFO [org.consumer.UserDAO] (main) User Andrea customer-id:12346 stored successfully
...
and so on... thousands of other updates.
}}}


now, with one single grep you can collect all the information you need:

{{{
import static org.grep4j.core.Grep4j.grep;
import static org.grep4j.core.fluent.Dictionary.on;
import static org.grep4j.core.fluent.Dictionary.expression;
...

//Obtaining all the sensitive information in the log
GrepResults results = grep(expression("customer-id"), on(profile)));

//this will return the total number of updates 
System.out.println("Total occurrences found : " + results.filterByRE("operation(.*)update").totalOccurrences());

//this will return the total number of updates for the customer-id 12345
System.out.println("Total occurrences found : " + results.filterBy("customer-id:12345").filterByRE("operation(.*)update").totalOccurrences());

//this will return the number of updates between 10am and 11am
System.out.println("Total occurrences found : " + results.filterBy("2012-05-30 10").totalOccurrences());

//This will filter the result in order to print only Andrea updates
for (GrepResult singleResult : results.filterBy("Andrea")) {
   System.out.println(singleResult.totalOccurrences());        
   System.out.println(singleResult);    
}

//This will filter only the Andrea result in order to print only when we stored Andrea changes successfully
for (GrepResult singleResult : results.filterBy("Andrea").filterBy("stored successfully")) {  
   System.out.println(singleResult.totalOccurrences());        
   System.out.println(singleResult);    
}

}}}

You can filter the {{{GrepResults}}} as well as the single {{{GrepResult}}} and you can filter using regular expression using the {{{.filterByRE("regular expression")}}} method.